#!/usr/bin/env python3
"""
Quiz Validation Script for Flash Quizzes

This script validates the quizzesList.json file and all individual quiz files
according to the project specifications.

IMPORTANT NOTE: This script was generated by GitHub Copilot and has NOT been 
reviewed by the repository maintainer. While it should work correctly based on 
the specifications, use at your own discretion. The impact of any potential 
issues in this validation script is minimal since it only performs checks and 
doesn't modify any files.
"""

import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Any, Set


class QuizValidator:
    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path)
        self.errors = []
        self.warnings = []
    
    def log_error(self, message: str):
        """Log an error message."""
        self.errors.append(f"ERROR: {message}")
        print(f"❌ ERROR: {message}")
    
    def log_warning(self, message: str):
        """Log a warning message."""
        self.warnings.append(f"WARNING: {message}")
        print(f"⚠️  WARNING: {message}")
    
    def log_success(self, message: str):
        """Log a success message."""
        print(f"✅ {message}")
    
    def validate_json_file(self, file_path: Path) -> Any:
        """Validate that a file contains valid JSON and return parsed content."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            self.log_error(f"File not found: {file_path}")
            return None
        except json.JSONDecodeError as e:
            self.log_error(f"Invalid JSON in {file_path}: {e}")
            return None
        except Exception as e:
            self.log_error(f"Error reading {file_path}: {e}")
            return None
    
    def validate_quiz_list(self) -> Dict[str, Any]:
        """Validate the main quizzesList.json file."""
        print("\n🔍 Validating quizzesList.json...")
        
        quiz_list_path = self.base_path / "quizzesList.json"
        quiz_list = self.validate_json_file(quiz_list_path)
        
        if quiz_list is None:
            return None
        
        # Check required fields
        if not isinstance(quiz_list, dict):
            self.log_error("quizzesList.json must be a JSON object")
            return None
        
        if "version" not in quiz_list:
            self.log_error("quizzesList.json missing required field 'version'")
        elif not isinstance(quiz_list["version"], str):
            self.log_error("'version' field must be a string")
        
        if "quizzes" not in quiz_list:
            self.log_error("quizzesList.json missing required field 'quizzes'")
            return None
        elif not isinstance(quiz_list["quizzes"], list):
            self.log_error("'quizzes' field must be an array")
            return None
        
        # Validate each quiz definition
        quiz_names = set()
        quiz_files = set()
        
        for i, quiz in enumerate(quiz_list["quizzes"]):
            self.validate_quiz_definition(quiz, i, quiz_names, quiz_files)
        
        if not self.errors:
            self.log_success("quizzesList.json is valid")
        
        return quiz_list
    
    def validate_quiz_definition(self, quiz: Dict[str, Any], index: int, 
                                quiz_names: Set[str], quiz_files: Set[str]):
        """Validate a single quiz definition."""
        if not isinstance(quiz, dict):
            self.log_error(f"Quiz at index {index} must be an object")
            return
        
        # Check required fields
        required_fields = ["name", "file_name", "version"]
        for field in required_fields:
            if field not in quiz:
                self.log_error(f"Quiz at index {index} missing required field '{field}'")
            elif not isinstance(quiz[field], str):
                self.log_error(f"Quiz at index {index}: '{field}' must be a string")
        
        # Check for duplicate names and files
        if "name" in quiz:
            if quiz["name"] in quiz_names:
                self.log_error(f"Duplicate quiz name: '{quiz['name']}'")
            quiz_names.add(quiz["name"])
        
        if "file_name" in quiz:
            if quiz["file_name"] in quiz_files:
                self.log_error(f"Duplicate quiz file_name: '{quiz['file_name']}'")
            quiz_files.add(quiz["file_name"])
        
        # Check optional fields
        if "icon" in quiz and not isinstance(quiz["icon"], str):
            self.log_error(f"Quiz '{quiz.get('name', index)}': 'icon' must be a string")
        
        if "tags" in quiz:
            if not isinstance(quiz["tags"], list):
                self.log_error(f"Quiz '{quiz.get('name', index)}': 'tags' must be an array")
            elif not all(isinstance(tag, str) for tag in quiz["tags"]):
                self.log_error(f"Quiz '{quiz.get('name', index)}': all tags must be strings")
        
        if "image_folder" in quiz and not isinstance(quiz["image_folder"], str):
            self.log_error(f"Quiz '{quiz.get('name', index)}': 'image_folder' must be a string")
    
    def validate_individual_quiz(self, quiz_info: Dict[str, Any]) -> bool:
        """Validate an individual quiz file."""
        file_name = quiz_info.get("file_name")
        if not file_name:
            return False
        
        print(f"\n🔍 Validating {file_name}...")
        
        quiz_path = self.base_path / "quizzes" / file_name
        quiz_data = self.validate_json_file(quiz_path)
        
        if quiz_data is None:
            return False
        
        if not isinstance(quiz_data, list):
            self.log_error(f"{file_name}: Quiz file must be a JSON array")
            return False
        
        if len(quiz_data) == 0:
            self.log_warning(f"{file_name}: Quiz file is empty")
        
        # Validate each card
        card_ids = set()
        quiz_tags = set()
        expected_tags = set(quiz_info.get("tags", []))
        has_images = "image_folder" in quiz_info
        image_folder = quiz_info.get("image_folder")
        
        for i, card in enumerate(quiz_data):
            self.validate_card(card, i, file_name, card_ids, quiz_tags, 
                             has_images, image_folder)
        
        # Check if quiz tags match card tags
        if expected_tags and quiz_tags:
            missing_tags = quiz_tags - expected_tags
            if missing_tags:
                self.log_warning(f"{file_name}: Cards use tags not listed in quiz definition: {missing_tags}")
            
            unused_tags = expected_tags - quiz_tags
            if unused_tags:
                self.log_warning(f"{file_name}: Quiz definition includes unused tags: {unused_tags}")
        
        if not self.errors:
            self.log_success(f"{file_name} is valid")
        
        return True
    
    def validate_card(self, card: Dict[str, Any], index: int, file_name: str,
                     card_ids: Set[str], quiz_tags: Set[str], 
                     has_images: bool, image_folder: str):
        """Validate a single card."""
        if not isinstance(card, dict):
            self.log_error(f"{file_name}: Card at index {index} must be an object")
            return
        
        # Check required field: id
        if "id" not in card:
            self.log_error(f"{file_name}: Card at index {index} missing required field 'id'")
        elif not isinstance(card["id"], str):
            self.log_error(f"{file_name}: Card at index {index}: 'id' must be a string")
        else:
            card_id = card["id"]
            if card_id in card_ids:
                self.log_error(f"{file_name}: Duplicate card ID: '{card_id}'")
            card_ids.add(card_id)
        
        # Check that at least one content field exists
        content_fields = ["frontTitle", "frontDescription", "frontImage", 
                         "backTitle", "backDescription", "backImage"]
        if not any(field in card for field in content_fields):
            self.log_warning(f"{file_name}: Card {card.get('id', index)} has no content fields - will be empty in app")
        
        # Validate optional fields
        string_fields = ["frontTitle", "frontDescription", "frontImage", 
                        "backTitle", "backDescription", "backImage"]
        for field in string_fields:
            if field in card and not isinstance(card[field], str):
                self.log_error(f"{file_name}: Card {card.get('id', index)}: '{field}' must be a string")
        
        # Validate tags
        if "tags" in card:
            if not isinstance(card["tags"], list):
                self.log_error(f"{file_name}: Card {card.get('id', index)}: 'tags' must be an array")
            elif not all(isinstance(tag, str) for tag in card["tags"]):
                self.log_error(f"{file_name}: Card {card.get('id', index)}: all tags must be strings")
            else:
                quiz_tags.update(card["tags"])
        
        # Validate images
        for image_field in ["frontImage", "backImage"]:
            if image_field in card:
                if not has_images:
                    self.log_error(f"{file_name}: Card {card.get('id', index)} uses '{image_field}' but quiz has no 'image_folder' defined")
                else:
                    image_path = self.base_path / "images" / image_folder / card[image_field]
                    if not image_path.exists():
                        self.log_error(f"{file_name}: Card {card.get('id', index)}: Image not found: {image_path}")
    
    def validate_all(self) -> bool:
        """Validate all quiz files."""
        print("🚀 Starting quiz validation...\n")
        
        # Validate main quiz list
        quiz_list = self.validate_quiz_list()
        if quiz_list is None:
            return False
        
        # Validate each individual quiz
        for quiz in quiz_list["quizzes"]:
            self.validate_individual_quiz(quiz)
        
        # Print summary
        print("\n" + "="*50)
        print("📊 VALIDATION SUMMARY")
        print("="*50)
        
        if self.errors:
            print(f"❌ {len(self.errors)} errors found:")
            for error in self.errors:
                print(f"   {error}")
        
        if self.warnings:
            print(f"⚠️  {len(self.warnings)} warnings:")
            for warning in self.warnings:
                print(f"   {warning}")
        
        if not self.errors and not self.warnings:
            print("🎉 All quizzes are valid! No errors or warnings found.")
        elif not self.errors:
            print("✅ All quizzes are valid! Only warnings found.")
        else:
            print("❌ Validation failed! Please fix the errors above.")
        
        return len(self.errors) == 0


def main():
    """Main function."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Validate Flash Quiz files")
    parser.add_argument("--path", "-p", default=".", 
                       help="Path to the quiz repository (default: current directory)")
    
    args = parser.parse_args()
    
    validator = QuizValidator(args.path)
    success = validator.validate_all()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()